name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [login-ui, admin-dashboard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: packages/web/${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: packages/web/${{ matrix.app }}
        run: npm ci

      - name: Run lint
        working-directory: packages/web/${{ matrix.app }}
        run: npm run lint

      - name: Run type check
        working-directory: packages/web/${{ matrix.app }}
        run: npm run type-check

      - name: Run unit tests
        working-directory: packages/web/${{ matrix.app }}
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: packages/web/${{ matrix.app }}/coverage/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: authway_test
          POSTGRES_USER: authway
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://authway:test_password@localhost:5432/authway_test?sslmode=disable
          REDIS_URL: redis://localhost:6379/0
        run: |
          go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.out
          flags: backend
          name: backend-coverage

  # Build and Push Docker Images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, frontend-tests, backend-tests]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component:
          - name: backend
            dockerfile: Dockerfile
            context: .
          - name: login-ui
            dockerfile: packages/web/login-ui/Dockerfile
            context: packages/web/login-ui
          - name: admin-dashboard
            dockerfile: packages/web/admin-dashboard/Dockerfile
            context: packages/web/admin-dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start services
        run: |
          # Use the built images for integration tests
          export AUTHWAY_BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          export AUTHWAY_LOGIN_UI_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-login-ui:${{ github.sha }}"
          export AUTHWAY_ADMIN_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin-dashboard:${{ github.sha }}"

          # Start services with docker-compose
          docker-compose -f docker-compose.test.yml up -d

          # Wait for services to be ready
          sleep 60

      - name: Run integration tests
        run: |
          # Health checks
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:3000 || exit 1
          curl -f http://localhost:3001 || exit 1

          # API tests
          curl -f http://localhost:8080/metrics || exit 1

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to staging
        run: |
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/*.yaml

          # Apply manifests
          kubectl apply -f k8s/staging/

          # Wait for rollout
          kubectl rollout status deployment/authway-backend -n authway-staging
          kubectl rollout status deployment/authway-login-ui -n authway-staging
          kubectl rollout status deployment/authway-admin-dashboard -n authway-staging

      - name: Run smoke tests
        run: |
          STAGING_URL="${{ secrets.STAGING_URL }}"
          curl -f $STAGING_URL/health || exit 1
          echo "Staging deployment successful: $STAGING_URL"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to production
        run: |
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/*.yaml

          # Apply manifests with rolling update
          kubectl apply -f k8s/production/

          # Wait for rollout
          kubectl rollout status deployment/authway-backend -n authway-production
          kubectl rollout status deployment/authway-login-ui -n authway-production
          kubectl rollout status deployment/authway-admin-dashboard -n authway-production

      - name: Run production smoke tests
        run: |
          PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
          curl -f $PRODUCTION_URL/health || exit 1
          echo "Production deployment successful: $PRODUCTION_URL"

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: |
            :rocket: Authway ${{ github.event.release.tag_name }} deployed to production!
            :link: ${{ secrets.PRODUCTION_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: |
            :x: Authway ${{ github.event.release.tag_name }} deployment failed!
            :link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: false