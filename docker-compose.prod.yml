version: '3.8'

services:
  # Core Database
  postgres:
    image: postgres:15-alpine
    container_name: authway-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: authway
      POSTGRES_USER: authway
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - authway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authway -d authway"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: authway-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # OAuth Provider (Ory Hydra)
  hydra-migrate:
    image: oryd/hydra:v2.2.0
    container_name: authway-hydra-migrate
    environment:
      DSN: postgres://authway:${POSTGRES_PASSWORD}@postgres:5432/authway?sslmode=disable
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - type: bind
        source: ./configs
        target: /etc/config/hydra
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - authway-network

  hydra:
    image: oryd/hydra:v2.2.0
    container_name: authway-hydra
    restart: unless-stopped
    command: serve -c /etc/config/hydra/hydra.yml all --dev
    environment:
      DSN: postgres://authway:${POSTGRES_PASSWORD}@postgres:5432/authway?sslmode=disable
      SECRETS_SYSTEM: ${HYDRA_SYSTEM_SECRET}
      URLS_SELF_ISSUER: https://auth.${DOMAIN}
      URLS_CONSENT: https://auth.${DOMAIN}/consent
      URLS_LOGIN: https://auth.${DOMAIN}/login
    volumes:
      - type: bind
        source: ./configs
        target: /etc/config/hydra
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
    depends_on:
      hydra-migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4444/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authway Backend API
  authway-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: authway-api
    restart: unless-stopped
    environment:
      ENV: production
      PORT: 8080

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: authway
      DB_USER: authway
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SSL_MODE: disable

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Hydra
      HYDRA_ADMIN_URL: http://hydra:4445
      HYDRA_PUBLIC_URL: https://auth.${DOMAIN}

      # OAuth Settings
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # Security
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}

      # External URLs
      FRONTEND_URL: https://auth.${DOMAIN}
      API_URL: https://api.${DOMAIN}

    volumes:
      - ./logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      hydra:
        condition: service_healthy
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Login UI
  authway-login-ui:
    build:
      context: ./packages/web/login-ui
      dockerfile: Dockerfile
      target: production
    container_name: authway-login-ui
    restart: unless-stopped
    environment:
      VITE_API_URL: https://api.${DOMAIN}
      VITE_HYDRA_PUBLIC_URL: https://auth.${DOMAIN}
    ports:
      - "3000:80"
    depends_on:
      - authway-api
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Admin Dashboard
  authway-admin:
    build:
      context: ./packages/web/admin-dashboard
      dockerfile: Dockerfile
      target: production
    container_name: authway-admin
    restart: unless-stopped
    environment:
      VITE_API_URL: https://api.${DOMAIN}
    ports:
      - "3001:80"
    depends_on:
      - authway-api
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: authway-nginx
    restart: unless-stopped
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - authway-api
      - authway-login-ui
      - authway-admin
      - hydra
    networks:
      - authway-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: authway-prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - authway-network

  grafana:
    image: grafana/grafana:latest
    container_name: authway-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - authway-network

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: authway-loki
    restart: unless-stopped
    volumes:
      - ./configs/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - authway-network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: authway-promtail
    restart: unless-stopped
    volumes:
      - ./configs/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/authway:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - authway-network

networks:
  authway-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local